package IDE;

import javax.swing.JOptionPane;
import javax.swing.JFileChooser;
import java.io.*;
import java.awt.event.*;
import javax.swing.event.*;
import java.beans.*;
import javax.swing.filechooser.FileFilter;


public class JEditor extends javax.swing.JInternalFrame {

    int numSociedad=1;
    private JPantalla pantalla;

    public JEditor() {
        initComponents();
        pack();
        //this.setSize(500,400);
    try {
      jbInit();
    }
    catch(Exception e) {
      e.printStackTrace();
    }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        programas = new javax.swing.JTabbedPane();

        setTitle("Editor");
        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        getContentPane().add(programas, java.awt.BorderLayout.CENTER);

        pack();
    }//GEN-END:initComponents

    public void initPantalla(JPantalla pant){
        pantalla = pant;
    }

    public boolean getModificado(){
        JPrograma temp;
        temp = (JPrograma) programas.getSelectedComponent();
        return temp.getModificado();
    }

    public void nuevoPrograma(){
        JPrograma temp = new JPrograma(pantalla);
        temp.initPrograma();
        programas.add("Sociedad"+numSociedad,temp);
        programas.setSelectedComponent(temp);
        numSociedad++;
    }

    public void abrirPrograma(){
        File archivo = null;
        JPrograma temp;
        JFileChooser aux = new JFileChooser();
        aux.setAcceptAllFileFilterUsed(false);
        // Configurar filtros "txt" y "age"
        ExampleFileFilter filter = new ExampleFileFilter("age", "Sociedad de Agentes");
        aux.addChoosableFileFilter(filter);
        int valor=aux.showOpenDialog(this);
        if(valor==aux.APPROVE_OPTION){
            temp = new JPrograma(pantalla);
            archivo = aux.getSelectedFile();
            if(!existeArchivo(archivo.getPath())){
                temp.abrir(archivo.getPath());
                programas.add(getOnlyName(archivo.getName()),temp);
                programas.setSelectedComponent(temp);
            }
            else JOptionPane.showMessageDialog(null, "El archivo especificado ya se encuentra abierto", "Alerta", JOptionPane.ERROR_MESSAGE);
       }
    }

    private boolean existeArchivo(String archivo){
    JPrograma temp;
    int total = programas.getComponentCount();
    for(int i=0; i<total; i++){
      temp = (JPrograma) programas.getComponentAt(i);
      if(archivo.equals(temp.getRuta())) return true;
    }
    return false;
    }

    public void guardarPrograma(){
        JPrograma temp;
        temp = (JPrograma) programas.getSelectedComponent();
        if(temp.existeRuta()){
            temp.guardar(temp.getRuta());
        }
        else
            guardarComoPrograma();
    }

    public void guardarComoPrograma(){
        File archivo = null;
        JPrograma temp;
        temp = (JPrograma) programas.getSelectedComponent();
        JFileChooser aux = new JFileChooser();
        aux.setDialogTitle("Guardar como...");
        aux.setAcceptAllFileFilterUsed(false);
        aux.setName("VAMOS VAMOS");
        ExampleFileFilter filter = new ExampleFileFilter("age", "Sociedad de Agentes");
        aux.addChoosableFileFilter(filter);
        int valor = aux.showSaveDialog(this);
        if(valor==aux.APPROVE_OPTION){
            archivo = aux.getSelectedFile();
            temp.guardar(archivo.getPath());
            programas.setTitleAt(programas.getSelectedIndex(),getOnlyName(archivo.getName()));
       }
    }

    public void guardarPrograma(JPrograma temp, int index){
        if(temp.existeRuta()){
            temp.guardar(temp.getRuta());
        }
        else
            guardarComoPrograma(temp, index);
    }

    public boolean isRuta(){
        JPrograma temp;
        temp = (JPrograma) programas.getSelectedComponent();
        if(temp.existeRuta()) return true; else return false;

    }

    public void guardarComoPrograma(JPrograma temp, int index){
        File archivo = null;
        JFileChooser aux = new JFileChooser();
        aux.setDialogTitle("Guardar como...");
        aux.setAcceptAllFileFilterUsed(false);
        ExampleFileFilter filter = new ExampleFileFilter("age", "Sociedad de Agentes");
        aux.addChoosableFileFilter(filter);
        int valor = aux.showSaveDialog(this);
        if(valor==aux.APPROVE_OPTION){
            archivo = aux.getSelectedFile();
            temp.guardar(archivo.getPath());
            programas.setTitleAt(index,getOnlyName(archivo.getName()));
       }
    }

    private String getOnlyName(String archivo){
        String e;
        int i=0;
        i = archivo.lastIndexOf('.');
        if(i>0 && i<archivo.length()){
            e = archivo.substring(0, i);
            return e;
        }
        else
          return archivo;
    }

    public void cerrarPrograma(){
        JPrograma temp;
        temp = (JPrograma) programas.getSelectedComponent();
        if(temp.getModificado()){
            String[] options = {"Si","No"};
            int n = JOptionPane.showOptionDialog(this,
                    "¿Desea guardar los cambios de "+ programas.getTitleAt(programas.getSelectedIndex()) +" ?",
                    "Confirmación",
            JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, options,options[0]);
            if(n==0){
                guardarPrograma();
                if(temp.existeRuta()) programas.remove(temp);
                else return;
            }
        }
        programas.remove(temp);
    }

    public void cerrarTodo(){
        while(programas.getComponentCount()!=0){
            cerrarPrograma();
        }
        programas.removeAll();
    }

    public void guardarTodo(){
    JPrograma temp;
    int index = programas.getSelectedIndex();
    int total = programas.getComponentCount();
    for(int i=0; i<total; i++){
      temp = (JPrograma) programas.getComponentAt(i);
      programas.setSelectedIndex(i);
      guardarPrograma(temp, i);
    }
    programas.setSelectedIndex(index);
    }

    public boolean getGuardarTodo(){
    JPrograma temp;
    int index = programas.getSelectedIndex();
    int total = programas.getComponentCount();
    for(int i=0; i<total; i++){
      temp = (JPrograma) programas.getComponentAt(i);
      if(temp.getModificado()) return true;
    }
    return false;
    }

    public int getCountProgramas(){
    JPrograma temp;
    int total = programas.getComponentCount();
    return total;
    }

    public void pegar(){
      JPrograma temp;
      temp = (JPrograma) programas.getSelectedComponent();
      temp.pegar();
    }

    public void copiar(){
      JPrograma temp;
      temp = (JPrograma) programas.getSelectedComponent();
      temp.copiar();
    }

    public void cortar(){
      JPrograma temp;
      temp = (JPrograma) programas.getSelectedComponent();
      temp.cortar();
    }

    public void eliminar(){
      JPrograma temp;
      temp = (JPrograma) programas.getSelectedComponent();
      temp.eliminar();
    }

    public void deshacer(){
      JPrograma temp;
      temp = (JPrograma) programas.getSelectedComponent();
      temp.deshacer();
    }

    public void rehacer(){
      JPrograma temp;
      temp = (JPrograma) programas.getSelectedComponent();
      temp.rehacer();
    }

    public void seleccionarTodo(){
      JPrograma temp;
      temp = (JPrograma) programas.getSelectedComponent();
      temp.seleccionarTodo();
    }

    public void imprimirPrograma(){
        JPrograma temp;
        temp = (JPrograma) programas.getSelectedComponent();
        temp.imprimir();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane programas;
    private void jbInit() throws Exception {
    this.setBorder(null);
    this.setToolTipText("");
    this.addInternalFrameListener(new javax.swing.event.InternalFrameAdapter() {
      public void internalFrameClosing(InternalFrameEvent e) {
        this_internalFrameClosing(e);
      }
    });
  }

  void this_internalFrameClosing(InternalFrameEvent e) {
    cerrarTodo();
    pantalla.validar(5);
  }

  public int ejecutar(){
    JPrograma temp;
    temp = (JPrograma) programas.getSelectedComponent();
    return temp.ejecutar();
  }

  public int getCountWarning(){
    JPrograma temp;
    temp = (JPrograma) programas.getSelectedComponent();
    return temp.getCountWarning();
  }

  public int getCountErrores(){
    JPrograma temp;
    temp = (JPrograma) programas.getSelectedComponent();
    return temp.getCountErrores();
  }

  public String getWarning(int i){
    JPrograma temp;
    temp = (JPrograma) programas.getSelectedComponent();
    return temp.getWarning(i);
  }

  public String getError(int i){
    JPrograma temp;
    temp = (JPrograma) programas.getSelectedComponent();
    return temp.getError(i);
  }

    // End of variables declaration//GEN-END:variables
}
