package IDE;

import java.io.*;
import java.awt.event.*;
import java.awt.Color;
import javax.swing.JOptionPane;
import javax.swing.event.*;
import java.beans.*;
import javax.swing.undo.*;
import javax.swing.AbstractAction;

public class JPrograma extends javax.swing.JPanel {

    private String ruta;
    private boolean modificado;
    private JPantalla pantalla;
    private final UndoManager undo = new UndoManager();

    public JPrograma(JPantalla pant) {
        initComponents();
        ruta = "";
        modificado = false;
        pantalla = pant;
    try {
      jbInit();
    }
    catch(Exception e) {
      e.printStackTrace();
    }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        scroll = new javax.swing.JScrollPane();
        codigo = new javax.swing.JTextArea();
        setLayout(new java.awt.BorderLayout());

        codigo.getDocument().addUndoableEditListener(new UndoableEditListener() {
          public void undoableEditHappened(UndoableEditEvent evt) {
              undo.addEdit(evt.getEdit());
              validarDeshReh();
            }
        });

        codigo.getActionMap().put("Undo",
            new AbstractAction("Undo") {
                public void actionPerformed(ActionEvent evt) {
                    try {
                        if (undo.canUndo()) {
                        undo.undo();
                          validarDeshReh();
                        }
                    } catch (CannotUndoException e) {
                    }
                }
            });

        codigo.getActionMap().put("Redo",
        new AbstractAction("Redo") {
            public void actionPerformed(ActionEvent evt) {
                try {
                    if (undo.canRedo()) {
                        undo.redo();
                        validarDeshReh();
                    }
                } catch (CannotRedoException e) {
                }
            }
        });


        codigo.setTabSize(5);
        codigo.setFont(new java.awt.Font("Courier New", 0, 12));
        codigo.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                codigoInputMethodTextChanged(evt);
            }
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
        });

        scroll.setViewportView(codigo);

        add(scroll, java.awt.BorderLayout.CENTER);

    }//GEN-END:initComponent

    public void initPrograma(){
        codigo.append("sociedad:\n\n\n\n\nfinSociedad\n\ncomportamiento:\n\n\n\n\nfinComportamiento\n\nacciones:\n\n\n\n\nfinAcciones");
    }

    private void validarDeshReh(){
        if (undo.canUndo()) pantalla.validar(6); else pantalla.validar(7);
        if (undo.canRedo()) pantalla.validar(8); else pantalla.validar(9);
    }

    private void codigoInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_codigoInputMethodTextChanged
        modificado = true;
        pantalla.validar(3);
    }//GEN-LAST:event_codigoInputMethodTextChanged


    public void setModificado(boolean valor){
      modificado = valor;
    }

    public void abrir(String ruta){
        try{
            BufferedReader fuente=new BufferedReader(
                        new InputStreamReader(
                        new FileInputStream(ruta)));
            setRuta(ruta);
            codigo.read(fuente,null);
            fuente.close();
        }
        catch(IOException e){}  // IOException
    }

    private void setRuta(String ruta){
        String e;
        int i = ruta.lastIndexOf('.');
        if(i>0 && i<ruta.length()){
            e = ruta.substring(i+1, ruta.length());
            if(e.equals("age"))
                this.ruta = ruta;
        }
    }

    public void guardar(String ruta){
        try{
            BufferedWriter destino=new BufferedWriter(
                        new OutputStreamWriter(
                        new FileOutputStream(ruta)));
            this.ruta = ruta;
            codigo.write(destino);
            destino.close();
            setModificado(false);
        }catch(IOException e){}
    }

    public boolean getModificado(){
        return modificado;
    }

    public String getRuta(){
        return ruta;
    }

    public boolean existeRuta(){
        if(ruta!="")
            return true;
        return false;
    }

    public void pegar(){
      codigo.paste();
    }

    public void copiar(){
      codigo.copy();
    }

    public void cortar(){
      codigo.cut();
    }

    public void eliminar(){
      codigo.replaceSelection("");
    }

    public void deshacer(){
      if(undo.canUndo()) undo.undo();
      validarDeshReh();
    }

    public void rehacer(){
      if(undo.canRedo()) undo.redo();
      validarDeshReh();
    }

    public void seleccionarTodo(){
      codigo.selectAll();
    }

    public void imprimir(){
        //codigo.print(codigo.getGraphics());
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane scroll;
    private javax.swing.JTextArea codigo;

  private void jbInit() throws Exception {
    codigo.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
      public void mouseDragged(MouseEvent e) {
        codigo_mouseDragged(e);
      }
    });
    codigo.addFocusListener(new java.awt.event.FocusAdapter() {
      public void focusGained(FocusEvent e) {
        codigo_focusGained(e);
      }
    });
    codigo.addKeyListener(new java.awt.event.KeyAdapter() {
      public void keyPressed(KeyEvent e) {
        codigo_keyPressed(e);
      }
      public void keyTyped(KeyEvent e) {
        codigo_keyTyped(e);
      }
    });
  }

  void codigo_keyPressed(KeyEvent e) {
//  codigo.append("CARACTER : " + e.getKeyCode());
  switch(e.getKeyCode()){
        case KeyEvent.VK_PASTE:
                        JOptionPane.showMessageDialog(null, "ya salió - paste", "Alerta", JOptionPane.ERROR_MESSAGE);
                        setModificado(true);
                        break;
        case KeyEvent.VK_CUT:
                        JOptionPane.showMessageDialog(null, "ya salió - cut", "Alerta", JOptionPane.ERROR_MESSAGE);
                        setModificado(true);
                        break;
        case KeyEvent.VK_ESCAPE:
                        JOptionPane.showMessageDialog(null, "ya salió - escape", "Alerta", JOptionPane.ERROR_MESSAGE);
                        break;
        case KeyEvent.VK_F1:
                        JOptionPane.showMessageDialog(null, "ya salió - F1", "Alerta", JOptionPane.ERROR_MESSAGE);
                        break;
        case KeyEvent.VK_UNDO:
                        JOptionPane.showMessageDialog(null, "ya salió - UNDO", "Alerta", JOptionPane.ERROR_MESSAGE);
                        deshacer();
                        break;
        case KeyEvent.VK_RIGHT:
        case KeyEvent.VK_LEFT:
        case KeyEvent.VK_UP:
        case KeyEvent.VK_DOWN:
        case KeyEvent.VK_HOME:
        case KeyEvent.VK_END:
                        if(e.isShiftDown()) pantalla.validar(10); // habilitar
                        else pantalla.validar(11); // deshabilitar
                        break;
        case KeyEvent.VK_CONTROL: case KeyEvent.VK_SHIFT:
                        break;
        case KeyEvent.VK_V:// PEGAR  (CTRL + V)
                        //setModificado(true);
                        break;
        case KeyEvent.VK_X:// CORTAR (CTRL + X)
                        if(e.isControlDown()){
                            pantalla.validar(11);
                            pantalla.validar(12);
                        } //setModificado(true);
                        break;
        case KeyEvent.VK_C: // COPIAR (CTRL + C)
                        if(e.isControlDown()) pantalla.validar(12);
                        break;
        case 89:          // REHACER  (CTRL + Y)
//                        if(xKey==17) rehacer();
                        break;
        case 90:          // DESHACER (CTRL + Z)
//                        if(xKey==17) deshacer();
                        break;
        default:        if(codigo.getSelectedText()!=null)
                            pantalla.validar(10);
                        else  pantalla.validar(11);
                        break;
  }
  }

  void codigo_focusGained(FocusEvent e) {
      pantalla.validar(4);
  }

  void codigo_keyTyped(KeyEvent e) {
      modificado = true;
      pantalla.validar(3);
  }

  void codigo_mouseDragged(MouseEvent e) {
      pantalla.validar(10);
  }

  public void ejecutar(){
      Principal compilador;
      JOptionPane.showMessageDialog(null, "En este momento se ejecuta", "Función:ejecutar()", JOptionPane.ERROR_MESSAGE);
  }

}
