package MaquinaVirtual;

import Herramientas.TablaSimbolos;
import java.util.*;
import java.lang.Integer;
import java.lang.Double;

public class Conducta extends Thread{

  String nombre;  // Nombre de la conducta
  String directorio; // Directorio en donde se encuentra el archivo de la conducta
  Agente agente;
  ArchivoObjeto in;
  int init, entrada;
  TablaSimbolos tablaEDLocal;
  TablaSimbolos tablaEDGlobal;
  Oraculo oraculo;
  Stack pilaNum;
  Stack pilaOper;


  public Conducta(Agente agente, String nombre, String directorio, Oraculo oraculo, TablaSimbolos tablaEDGlobal){
    super(nombre);
    this.agente = agente;
    this.nombre = nombre; // Nombre de la conducta y nombre del archivo de la conducta
    this.directorio = directorio;
    init= entrada = 0;
    this.oraculo = oraculo;
    this.tablaEDGlobal = tablaEDGlobal;
    tablaEDLocal = new TablaSimbolos();
    pilaNum = new Stack();
    pilaOper = new Stack();
    abrirArchivo();
    initTablaEDLocal();
    in.cierra_archivo();
  }

  private void abrirArchivo(){
    in = new ArchivoObjeto(directorio+nombre+".Age2000.obj");
  }

   public void run(){
     for(;;){
       abrirArchivo();  // Abre el archivo las veces que sea necesario.
       entrada = in.getIndex(init); // Toma el primer caracter del conjunto de instrucciones
       instrucciones(); // ejecuta las instrucciones
     }
   }

   private void instrucciones(){
     while(entrada!=-1){
       switch(entrada){
         case '*':int id = in.getCodigo();   // Solicita
                  oraculo.solicita(nombre,id);
                  break;
         case '=':if(in.getCodigo()=='$'){ // Detecta una asignación
                     int idVar = in.getCodigo();
                     double resultado = operacion();
                     if(tablaEDLocal.buscar_Id(idVar)){
                       tablaEDLocal.actualiza_Id_valor2(idVar, resultado);
                     }
                     else{
                       if(tablaEDGlobal.buscar_Id(idVar)){
                         tablaEDGlobal.actualiza_Id_valor2(idVar, resultado);
                       }
                     }
                  }
                  break;
         case 22: int caracter = in.getCodigo();
                  if(caracter=='['){     // Evalúa la condición REPITE
                     do{
                       caracter = in.getCodigo();
                     }while(caracter!=']');
                  }
                  break;
       }
       entrada = in.getCodigo();
     }
   }

   private void initTablaEDLocal(){
  String variable= "";
  int id=0, tipo = 0;
  double valor= 0.0;
  int caracter= in.getCodigo();
  if(caracter == 64){ // '@'  Si se declaran las variables tipo Entero y Decimal
    caracter = in.getCodigo();
    do{
        if (caracter == '$') { // Indicador de sensores
          variable = in.getVariable();
          id = in.getCodigo();
          tipo = in.getCodigo();
          valor = in.getNumero();
          tablaEDLocal.insertar(variable,tipo,0,valor,id);
        }
        caracter = in.getCodigo();
    }while(caracter != -1 & caracter != 64);
    tablaEDLocal.imprimir(); // Sólo para depurar
    in.getCodigo();
  }
  init = in.getIndice();   // Importante conocer la ubicación de las primeras instrucciones, en el archivo
  entrada = caracter;
}

// ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **
//                                   Evaluación de operaciones aritméticas
// ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **

private double operacion(){
boolean band = false;
int caracter =0;
int i=0;
caracter = in.getCodigo();
do{
  switch(caracter){
    case '#': /*double x= 0.0;
              x = in.getNumeroOp();
              pilaNum.push(new Double(x));*/
              pilaNum.push(new Double (in.getNumeroOp()));
              if(band == true){
                reducirMulDiv();
                band = false;
              }
              break;
    case '$': double y= getDoubleVar();
              pilaNum.push(new Double(y));
              if(band == true){
                reducirMulDiv();
                band = false;
              }
              break;
    case 16: case 17: // + y -
              pilaOper.push(new Integer(caracter));
              break;
    case 18: case 19:  // * y |
               pilaOper.push(new Integer(caracter));
               band = true;
               break;
    case '(':
              pilaOper.push(new Integer(caracter));
              band = false;
              break;
    case ')':
              reducir();
              break;
  }
  caracter = in.getCodigo();
}while(!isDelimit(caracter));
return resultado();
}

private double resultado(){
int operd = 0;
double valor= 0.0, temp;
if(pilaOper.empty()==false){
  do {
    Integer operador = (Integer) pilaOper.pop();
    operd = operador.intValue();
    switch (operd) {
      case 16: // +
        temp = popStackNum();
        valor = temp + popStackNum();
        pilaNum.push(new Double(valor));
        break;
      case 17: // -
        temp = popStackNum();
        valor = popStackNum() - temp;
        pilaNum.push(new Double(valor));
        break;
      case 18: // *
        temp = popStackNum();
        valor = temp * popStackNum();
        pilaNum.push(new Double(valor));
        break;
      case 19: // '/'
        temp = popStackNum();
        valor = popStackNum() / temp;
        pilaNum.push(new Double(valor));
        break;

    }
    temp = valor = 0.0;
  }while(!pilaOper.empty());
}
return popStackNum();
}

private double popStackNum(){
double temp = 0.0;
try{
  Double doble = (Double) pilaNum.pop();
  temp = doble.doubleValue();
}catch(EmptyStackException e){}
return temp;
}

private int popStackOper(){
int operd=0;
try{
  Integer operador = (Integer) pilaOper.pop();
  operd = operador.intValue();
}catch(EmptyStackException e){}
return operd;
}

private void reducirMulDiv(){
double temp, valor;
int operd;
operd = popStackOper();
switch (operd) {
  case 18: // *
           temp = popStackNum();
           valor = temp * popStackNum();
           pilaNum.push(new Double(valor));
           break;
  case 19: // '/'
           temp = popStackNum();
           valor = popStackNum() / temp;
           pilaNum.push(new Double(valor));
           break;
}

}

private void reducir(){  // Reduce *, /, a causa de encontrar los paréntesis
boolean band = false, once = false;
double valor= 0.0, temp;
int operd;
operd = popStackOper();
do{
  switch (operd) {
    case '(':// verifica si existe la multiplicación previamente
             if(pilaOper.empty()==false){ // si siguen habiendo
               operd = popStackOper();
               if (operd == 18 || operd == 19) {
                 pilaOper.push(new Integer(operd));
                 once = true;
               }
             }
             band = true;
             break;
    case 16: // +
             temp = popStackNum();
             valor = temp + popStackNum();
             pilaNum.push(new Double(valor));
             break;
    case 17: // -
             temp = popStackNum();
             valor = popStackNum() - temp;
             pilaNum.push(new Double(valor));
             break;
    case 18: // *
             temp = popStackNum();
             valor = temp * popStackNum();
             pilaNum.push(new Double(valor));
             once = false;
             break;
    case 19: //'/'
             temp = popStackNum();
             valor = popStackNum() / temp;
             pilaNum.push(new Double(valor));
             once = false;
             break;

  }
  valor = 0.0;
  operd = popStackOper();
}while(band==false | (band==true & once==true));
pilaOper.push(new Integer(operd));
}

private boolean isDelimit(int caracter){
boolean band = false;
switch(caracter){
  case '%': band = true;  // Termina una operación
            break;
  case ']': band = true;  // Termina una condición
            break;
  case 14: case 15: // & y |  // lo siguiente es un operador lógico
            band = true;
            break;
  case 6: case 7: case 8: case 9: case 11: case 12: // operadores relacionales
            band = true;
            break;

}
return band;
}

private double getDoubleVar(){
  double temp = 0.0;
  int id = in.getCodigo();
  if(tablaEDLocal.buscar_Id(id))  temp = tablaEDLocal.buscarIdValor2(id);
  else if(tablaEDGlobal.buscar_Id(id))  temp = tablaEDGlobal.buscarIdValor2(id);
  return temp;
}
// ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **

}
