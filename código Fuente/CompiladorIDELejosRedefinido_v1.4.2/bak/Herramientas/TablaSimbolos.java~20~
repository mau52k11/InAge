package Herramientas;

/*
 * TablaSimbolos, es la clase que forma y contiene las variables y sus tipos,
 * encontradas en un programa
*/

public class TablaSimbolos{
  private NodoSimbolo raiz;
  private NodoSimbolo hoja;
  private NodoSimbolo temp;
  private int id;

  public TablaSimbolos(){
  raiz=hoja=null;
  id = 1;
  }

  public boolean vacio(){
  System.out.println("Entro al vacio");
  if(raiz==null)
    return true;
  else
    return false;
  }

  public void insertar(String n, int t, int v){
  if(raiz==null)
    raiz = hoja = new NodoSimbolo(n,t,v,id);
  else
    hoja = hoja.next = new NodoSimbolo(n,t,v, id);
  id++;
  }

  public void insertar(String n, int t, int v, double v2){
  if(raiz==null)
    raiz = hoja = new NodoSimbolo(n,t,v,v2,id);
  else
    hoja = hoja.next = new NodoSimbolo(n,t,v,v2, id);
  id++;
  }

  public void insertar(String n, int t, int v, double v2, int ccid){
  if(raiz==null)
    raiz = hoja = new NodoSimbolo(n,t,v,v2,ccid);
  else
    hoja = hoja.next = new NodoSimbolo(n,t,v,v2,ccid);
  }

  public void eliminar(String n){
    temp = null;
    nodo_eliminar(raiz, n);
  }

  public void nodo_eliminar(NodoSimbolo nodo, String dato){
    if(nodo == null)
      return;
    else {
      if(dato.compareTo(nodo.nombre)==0){
        if(temp==null)
          raiz = temp = nodo.next;
        else{
          if(nodo.next==null)
            hoja=temp;
          temp.next = nodo.next;
          }
         nodo = null;
        return;
        }
      else{
         temp = nodo;
         nodo_eliminar(nodo.next, dato);
         }
    }
  }

/* ****************************************************** */

  public boolean buscar(String dato){ // busca un nodo
    return buscar_nodo(raiz, dato);
  }

  private boolean buscar_nodo(NodoSimbolo nodo, String dato){
    if(nodo == null)
      return false;
    else {
      if(dato.compareTo(nodo.nombre)==0)
         return true;
      else
         return buscar_nodo(nodo.next, dato);
          }
  }// fin del método buscar_nodo

/* ****************************************************** */

  public int count(){ // busca un nodo
    int i=0;
    return buscar_count(raiz, i);
  }

  private int buscar_count(NodoSimbolo nodo, int i){
    if(nodo == null)
      return i;
    else {
         i++;
         return buscar_count(nodo.next, i);
          }
  }// fin del método buscar_nodo

/* ****************************************************** */

  public boolean getUso(int x){ // busca un nodo
  NodoSimbolo temp = raiz;
    while(x>1){
      temp = temp.next;
      x--;
    }
  return temp.uso;
  }

/* ****************************************************** */

  public int getUsoTipo(int x, int tipo){ // busca un nodo
  NodoSimbolo temp = raiz;
    while(x>1){
      temp = temp.next;
      x--;
    }
  if(temp.tipo==tipo){      // el tipo a evaluar es el que se pide
    if(temp.uso) return 1; // su uso es TRUE
      else return 0;        // su uso es FALSE
  }
  else
    return -1;  // no es igual al tipo que se pide
  }

/* ****************************************************** */

  public String getNombre(int x){ // busca un nodo
  NodoSimbolo temp = raiz;
    while(x>1){
      temp = temp.next;
      x--;
    }
  return temp.nombre;
  }

/* ****************************************************** */

  public int buscar_var_tipo(String dato){ // busca un nodo
    return buscar_nodo_var_tipo(raiz, dato);
  }

  private int buscar_nodo_var_tipo(NodoSimbolo nodo, String dato){
    if(nodo == null)
      return -1;
    else {
      if(dato.compareTo(nodo.nombre)==0)
        return nodo.tipo;
      else
         return buscar_nodo_var_tipo(nodo.next, dato);
          }
  }// fin del método buscar_nodo

  /* ******************************************************
     Búsqueda para generar el codigo objeto de sensores
   */

    public String getCodigoSensores(){ // busca un nodo
      NodoSimbolo temp;
      temp = raiz;
      String cadena = "";
      while(temp!=null){
        if((temp.tipo==4 | temp.tipo==5 | temp.tipo==6 | temp.tipo==9 | temp.tipo==10 |
           temp.tipo==11 | temp.tipo==12 | temp.tipo==13 | temp.tipo==14 | temp.tipo==15 |
           temp.tipo==16) & temp.uso == true){
         // la cadena que regresa con el formato de un sensor es
         // "  (&)("NombreVariable")(id)(tipo)   "
          cadena = cadena + '&' + (char)34 + temp.nombre + (char)34 + (char)temp.id + (char)temp.tipo;
        }

        temp = temp.next;
      }
      return cadena;
    }

    /* ******************************************************
       Búsqueda para generar el codigo objeto de acciones
     */

      public String getCodigoAcciones(){ // busca un nodo
        NodoSimbolo temp;
        temp = raiz;
        String cadena = "";
        while(temp!=null){
          if(temp.tipo==3 & temp.uso == true){
           // la cadena que regresa con el formato de una acción
           // "  (*)("NombreVariable")(id)"
            cadena = cadena + '*' + (char)34 + temp.nombre + (char)34 + (char)temp.id;
          }

          temp = temp.next;
        }
        return cadena;
      }


    /* ***************************************************************
       Búsqueda para generar el codigo objeto de Enteros y Decimales
     */

      public String getCodigoEnteroDecimal(){ // busca un nodo
        NodoSimbolo temp;
        temp = raiz;
        String cadena = "";
        while(temp!=null){
          // la cadena que regresa con el formato de un Entero o Decimal es
          // "  (&)("NombreVariable")(id)(tipo)(valor)   "
          if(temp.tipo==7 & temp.uso == true){ // Si es un entero
            cadena = cadena + '$' + (char)34 + temp.nombre + (char)34 + (char)temp.id + (char)temp.tipo + (char)35 + temp.valor + (char)35;
          }
          if(temp.tipo==8 & temp.uso == true){ // Si es un decimal
            cadena = cadena + '$' + (char)34 + temp.nombre + (char)34 + (char)temp.id + (char)temp.tipo + (char)35 + temp.valor2 + (char)35;
          }
          temp = temp.next;
        }
        return cadena;
      }

/* ****************************************************** */

  public String buscar_nombre(int tipo){ // busca un nodo
    return buscar_nodo_nombre(raiz, tipo);
  }

  private String buscar_nodo_nombre(NodoSimbolo nodo, int tipo){
    if(nodo == null)
      return "";
    else {
      if(nodo.tipo==tipo)
        return nodo.nombre;
      else
         return buscar_nodo_nombre(nodo.next, tipo);
          }
  }// fin del método buscar_nodo_nombre

/* ****************************************************** */

  public boolean buscar_tipo(int tipo){ // busca un nodo
    return buscar_nodo_tipo(raiz, tipo);
  }

  private boolean buscar_nodo_tipo(NodoSimbolo nodo, int tipo){
    if(nodo == null)
      return false;
    else {
      if(nodo.tipo==tipo)
        return true;
      else
         return buscar_nodo_tipo(nodo.next, tipo);
          }
  }// fin del método buscar_nodo


/* ****************************************************** */

  public void eliminar_tipo(int tipo){ // busca un nodo
    eliminar_nodo_tipo(raiz, tipo);
  }

  private void eliminar_nodo_tipo(NodoSimbolo nodo, int tipo){
    if(nodo == null) return;
    else {
      if(nodo.tipo==tipo){
        if(temp==null){
          raiz = temp = nodo.next;
          }
        else{
          if(nodo.next==null)
            hoja=temp;
          temp.next = nodo.next;
          }
         nodo = null;
         eliminar_nodo_tipo(temp.next, tipo);
        }
      else{
         temp = nodo;
         eliminar_nodo_tipo(nodo.next, tipo);
         }
    }
  }// fin del método buscar_nodo

/* ****************************************************** */

  public boolean buscar_tipo_valor(int tipo, int valor){ // busca un nodo
    return buscar_nodo_tipo_valor(raiz, tipo, valor);
  }

  private boolean buscar_nodo_tipo_valor(NodoSimbolo nodo, int tipo, int valor){
    if(nodo == null)
      return false;
    else {
      if(nodo.tipo==tipo & nodo.valor==valor)
        return true;
      else
         return buscar_nodo_tipo_valor(nodo.next, tipo, valor);
          }
  }// fin del método buscar_nodo

/* ****************************************************** */

  public int buscar_var_valor(String dato){ // busca un nodo
    return buscar_nodo_var_valor(raiz, dato);
  }

  private int buscar_nodo_var_valor(NodoSimbolo nodo, String dato){
    if(nodo == null)
      return -1;
    else {
      if(dato.compareTo(nodo.nombre)==0)
        return nodo.valor;
      else
         return buscar_nodo_var_valor(nodo.next, dato);
          }
  }// fin del método buscar_nodo

/* ****************************************************** */

    public double buscar_var_valor2(String dato){ // busca un nodo
      return buscar_nodo_var_valor2(raiz, dato);
    }

    private double buscar_nodo_var_valor2(NodoSimbolo nodo, String dato){
      if(nodo == null)
        return -1;
      else {
        if(dato.compareTo(nodo.nombre)==0)
          return nodo.valor2;
        else
           return buscar_nodo_var_valor2(nodo.next, dato);
            }
    }// fin del método buscar_nodo


    /* ****************************************************** */

        public int buscar_var_id(String dato){ // busca un nodo
          return buscar_nodo_var_id(raiz, dato);
        }

        private int buscar_nodo_var_id(NodoSimbolo nodo, String dato){
          if(nodo == null)
            return -1;
          else {
            if(dato.compareTo(nodo.nombre)==0)
              return nodo.id;
            else
               return buscar_nodo_var_id(nodo.next, dato);
                }
        }// fin del método buscar_nodo


 /* ****************************************************** */

  public void actualiza_tipo(String dato, int tipo){
    actualiza_nodo_var_tipo(raiz, dato, tipo);
  }

  private void actualiza_nodo_var_tipo(NodoSimbolo nodo, String dato, int tipo){
    if(nodo != null){
      if(dato.compareTo(nodo.nombre)==0){
        nodo.tipo = tipo;
        }
      else
         actualiza_nodo_var_tipo(nodo.next, dato, tipo);
    }
  }// fin del método buscar_nodo

  /* ****************************************************** */

   public void actualiza_Id_valor2(int id, double valor2){
     actualiza_nodo_var_Id_var2(raiz, id, valor2);
   }

   private void actualiza_nodo_var_Id_var2(NodoSimbolo nodo, int id, double valor2){
     if(nodo != null){
       if(nodo.id==id){
         nodo.valor2 = valor2;
         }
       else
          actualiza_nodo_var_Id_var2(nodo.next, id, valor2);
     }
   }// fin del método buscar_nodo


/* ****************************************************** */

  public void actualiza_valor(String dato, int valor){
    actualiza_nodo_var_valor(raiz, dato, valor);
  }

  private void actualiza_nodo_var_valor(NodoSimbolo nodo, String dato, int valor){
    if(nodo != null){
      if(dato.compareTo(nodo.nombre)==0)
        nodo.valor = valor;
      else
         actualiza_nodo_var_valor(nodo.next, dato, valor);
    }
  }// fin del método buscar_nodo

/* ****************************************************** */

    public void actualiza_valor2(String dato, double valor){
      actualiza_nodo_var_valor2(raiz, dato, valor);
    }

    private void actualiza_nodo_var_valor2(NodoSimbolo nodo, String dato, double valor2){
      if(nodo != null){
        if(dato.compareTo(nodo.nombre)==0)
          nodo.valor2 = valor2;
        else
           actualiza_nodo_var_valor2(nodo.next, dato, valor2);
      }
    }// fin del método buscar_nodo

/* ****************************************************** */

  public int actualiza_uso(String dato, boolean uso){
    return actualiza_nodo_var_uso(raiz, dato, uso);
  }

  private int actualiza_nodo_var_uso(NodoSimbolo nodo, String dato, boolean uso){
    if(nodo != null){
      if(dato.compareTo(nodo.nombre)==0){
        if(nodo.uso==uso)
          return 2; // ya se encuentra con el valor de uso deseado
        else{ nodo.uso = uso; return 1;} // actualizó el valor de uso al deseado
      }
      else
         return actualiza_nodo_var_uso(nodo.next, dato, uso);
    }
    else
      return 0; // no encontró el valor del nodo especificado
  }// fin del método buscar_nodo

/* ******************************************************************** */

  public String getNombreIndice(int indice){
    NodoSimbolo temp;
    temp = raiz;
    for(int i=1; temp!=null & i<indice; i++){
      temp = temp.next;
    }
    return temp.nombre;
  }

  /* ******************************************************************** */

    public int getTipoIndice(int indice){
      NodoSimbolo temp;
      temp = raiz;
      for(int i=1; temp!=null & i<indice; i++){
        temp = temp.next;
      }
      return temp.tipo;
    }

  /* ******************************************************************** */

  public int getIdIndice(int indice){
    NodoSimbolo temp;
    temp = raiz;
    for(int i=1; temp!=null & i<indice; i++){
      temp = temp.next;
    }
    return temp.id;
  }

  /* ******************************************************************** */

  public void actualizaValorIndice(int indice, int valor){
    NodoSimbolo temp;
    temp = raiz;
    for(int i=1; temp!=null & i<indice; i++){
      temp = temp.next;
    }
    temp.valor = valor;
  }

  public void actualizaAllUso(boolean valor){
    NodoSimbolo temp;
    temp = raiz;
    while(temp!=null){
      temp.uso = valor;
      temp = temp.next;
    }
  }


/* ******************************************************************** */

  public void imprimir(){
  NodoSimbolo temp;
  temp = raiz;
  System.out.println("********************************************");
  while(temp!=null){
    temp.recorre();
    temp = temp.next;
  }
  System.out.println("********************************************");
  }

}
