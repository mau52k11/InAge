package Herramientas;

public class TTSimbolos{
  private TNodoSimbolo raiz;
  private TNodoSimbolo hoja;
  private TNodoSimbolo temp;

  public TTSimbolos(){
  raiz=hoja=null;
  }

  public boolean vacio(){
  System.out.println("Entro al vacio");
  if(raiz==null)
    return true;
  else
    return false;
  }

  public void insertar(String n, int t, int v){
  if(raiz==null)
    raiz = hoja = new TNodoSimbolo(n,t,v);
  else
    hoja = hoja.next = new TNodoSimbolo(n,t,v);
  }

  public void eliminar(String n){
    temp = null;
    nodo_eliminar(raiz, n);
  }

  public void nodo_eliminar(TNodoSimbolo nodo, String dato){
    if(nodo == null)
      return;
    else {
      if(dato.compareTo(nodo.nombre)==0){
        if(temp==null)
          raiz = temp = nodo.next;
        else{
          if(nodo.next==null)
            hoja=temp;
          temp.next = nodo.next;
          }
         nodo = null;
        return;
        }
      else{
         temp = nodo;
         nodo_eliminar(nodo.next, dato);
         }
    }
  }

/* ****************************************************** */

  public boolean buscar(String dato){ // busca un nodo
    return buscar_nodo(raiz, dato);
  }

  private boolean buscar_nodo(TNodoSimbolo nodo, String dato){
    if(nodo == null)
      return false;
    else {
      if(dato.compareTo(nodo.nombre)==0)
         return true;
      else
         return buscar_nodo(nodo.next, dato);
          }
  }// fin del método buscar_nodo

/* ****************************************************** */

  public int count(){ // busca un nodo
    int i=0;
    return buscar_count(raiz, i);
  }

  private int buscar_count(TNodoSimbolo nodo, int i){
    if(nodo == null)
      return i;
    else {
         i++;
         return buscar_count(nodo.next, i);
          }
  }// fin del método buscar_nodo

/* ****************************************************** */

  public boolean getUso(int x){ // busca un nodo
  TNodoSimbolo temp = raiz;
    while(x>1){
      temp = temp.next;
      x--;
    }
  return temp.uso;
  }

/* ****************************************************** */

  public int getUsoTipo(int x, int tipo){ // busca un nodo
  TNodoSimbolo temp = raiz;
    while(x>1){
      temp = temp.next;
      x--;
    }
  if(temp.tipo==tipo){      // el tipo a evaluar es el que se pide
    if(temp.uso) return 1; // su uso es TRUE
      else return 0;        // su uso es FALSE
  }
  else
    return -1;  // no es igual al tipo que se pide
  }

/* ****************************************************** */

  public String getNombre(int x){ // busca un nodo
  TNodoSimbolo temp = raiz;
    while(x>1){
      temp = temp.next;
      x--;
    }
  return temp.nombre;
  }

/* ****************************************************** */

  public int buscar_var_tipo(String dato){ // busca un nodo
    return buscar_nodo_var_tipo(raiz, dato);
  }

  private int buscar_nodo_var_tipo(TNodoSimbolo nodo, String dato){
    if(nodo == null)
      return -1;
    else {
      if(dato.compareTo(nodo.nombre)==0)
        return nodo.tipo;
      else
         return buscar_nodo_var_tipo(nodo.next, dato);
          }
  }// fin del método buscar_nodo

/* ****************************************************** */

  public String buscar_nombre(int tipo){ // busca un nodo
    return buscar_nodo_nombre(raiz, tipo);
  }

  private String buscar_nodo_nombre(TNodoSimbolo nodo, int tipo){
    if(nodo == null)
      return "";
    else {
      if(nodo.tipo==tipo)
        return nodo.nombre;
      else
         return buscar_nodo_nombre(nodo.next, tipo);
          }
  }// fin del método buscar_nodo_nombre

/* ****************************************************** */

  public boolean buscar_tipo(int tipo){ // busca un nodo
    return buscar_nodo_tipo(raiz, tipo);
  }

  private boolean buscar_nodo_tipo(TNodoSimbolo nodo, int tipo){
    if(nodo == null)
      return false;
    else {
      if(nodo.tipo==tipo)
        return true;
      else
         return buscar_nodo_tipo(nodo.next, tipo);
          }
  }// fin del método buscar_nodo

/* ****************************************************** */

  public void eliminar_tipo(int tipo){ // busca un nodo
    eliminar_nodo_tipo(raiz, tipo);
  }

  private void eliminar_nodo_tipo(TNodoSimbolo nodo, int tipo){
    if(nodo == null) return;
    else {
      if(nodo.tipo==tipo){
        if(temp==null){
          raiz = temp = nodo.next;
          }
        else{
          if(nodo.next==null)
            hoja=temp;
          temp.next = nodo.next;
          }
         nodo = null;
         eliminar_nodo_tipo(temp.next, tipo);
        }
      else{
         temp = nodo;
         eliminar_nodo_tipo(nodo.next, tipo);
         }
    }
  }// fin del método buscar_nodo

/* ****************************************************** */

  public boolean buscar_tipo_valor(int tipo, int valor){ // busca un nodo
    return buscar_nodo_tipo_valor(raiz, tipo, valor);
  }

  private boolean buscar_nodo_tipo_valor(TNodoSimbolo nodo, int tipo, int valor){
    if(nodo == null)
      return false;
    else {
      if(nodo.tipo==tipo & nodo.valor==valor)
        return true;
      else
         return buscar_nodo_tipo_valor(nodo.next, tipo, valor);
          }
  }// fin del método buscar_nodo

/* ****************************************************** */

  public int buscar_var_valor(String dato){ // busca un nodo
    return buscar_nodo_var_valor(raiz, dato);
  }

  private int buscar_nodo_var_valor(TNodoSimbolo nodo, String dato){
    if(nodo == null)
      return -1;
    else {
      if(dato.compareTo(nodo.nombre)==0)
        return nodo.valor;
      else
         return buscar_nodo_var_valor(nodo.next, dato);
          }
  }// fin del método buscar_nodo

/* ****************************************************** */

  public void actualiza_tipo(String dato, int tipo){
    actualiza_nodo_var_tipo(raiz, dato, tipo);
  }

  private void actualiza_nodo_var_tipo(TNodoSimbolo nodo, String dato, int tipo){
    if(nodo != null){
      if(dato.compareTo(nodo.nombre)==0){
        nodo.tipo = tipo;
        }
      else
         actualiza_nodo_var_tipo(nodo.next, dato, tipo);
    }
  }// fin del método buscar_nodo


/* ****************************************************** */

  public void actualiza_valor(String dato, int valor){
    actualiza_nodo_var_valor(raiz, dato, valor);
  }

  private void actualiza_nodo_var_valor(TNodoSimbolo nodo, String dato, int valor){
    if(nodo != null){
      if(dato.compareTo(nodo.nombre)==0)
        nodo.valor = valor;
      else
         actualiza_nodo_var_valor(nodo.next, dato, valor);
    }
  }// fin del método buscar_nodo

/* ****************************************************** */

  public int actualiza_uso(String dato, boolean uso){
    return actualiza_nodo_var_uso(raiz, dato, uso);
  }

  private int actualiza_nodo_var_uso(TNodoSimbolo nodo, String dato, boolean uso){
    if(nodo != null){
      if(dato.compareTo(nodo.nombre)==0){
        if(nodo.uso==uso)
          return 2; // ya se encuentra con el valor de uso deseado
        else{ nodo.uso = uso; return 1;} // actualizó el valor de uso al deseado
      }
      else
         return actualiza_nodo_var_uso(nodo.next, dato, uso);
    }
    else
      return 0; // no encontró el valor del nodo especificado
  }// fin del método buscar_nodo



  public void imprimir(){
  TNodoSimbolo temp;
  temp = raiz;
  while(temp!=null){
    temp.recorre();
    temp = temp.next;
  }
  }

}