package Herramientas;

public class ListaRedoUndo {

  private NodoRedoUndo raiz;
  private NodoRedoUndo hoja;

  public ListaRedoUndo(){
  raiz=hoja=null;
  }

  public boolean vacio(){
  if(raiz==null)
    return true;
  else
    return false;
  }

/*
 * Inserta un nodo a la lista de Redo/Undo
*/
  public void insertar(int tipo, int id, int x1, int x2, int y1, int y2){
  if(raiz==null)
    raiz = hoja = new NodoRedoUndo(tipo,id,x1,y1,x2,y2);
  else
    hoja = hoja.next = new NodoLista(tipo,id,x1,y1,x2,y2);
  }

  public void imprimir(){
  NodoLista temp;
  temp = raiz;
  while(temp!=null){
    temp.recorre();
    temp = temp.next;
  }
  }

  /*
   * Cuenta la cantidad de nodos existentes en la lista
   * Cuenta la cantidad de errores encontrados en el archivo fuente, al
   * correr los procesos de un compilador
  */

  public int getCountNodo(){
  int count=0;
  NodoLista temp;
  temp = raiz;
  while(temp!=null){
    count++;
    temp = temp.next;
  }
  return count;
  }

  public String getRowDesc(int nodo){
  NodoLista temp;
  temp = raiz;
  for(int i=1; i<nodo && temp!=null; i++) temp = temp.next;
  if(temp!=null) return temp.getStringNodo(); else return "";
  }

  public int getRow(int nodo){
  NodoLista temp;
  temp = raiz;
  for(int i=1; i<nodo && temp!=null; i++) temp = temp.next;
  if(temp!=null) return temp.getRow(); else return 0;
  }

  public NodoLista getNodo(int nodo){
    NodoLista temp;
    temp = raiz;
    for(int i=1; i<nodo && temp!=null; i++) temp = temp.next;
    return temp;
  }



}
