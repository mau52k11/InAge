package IDE;

import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JFileChooser;
import java.io.*;
import java.awt.event.*;
import javax.swing.event.*;

public class JEditor extends javax.swing.JInternalFrame {

    int numSociedad=1;
    private JPantalla pantalla;
    ImageIcon imgAge2000;
    String directorio;

    public JEditor() {
        initComponents();
        pack();
        //this.setSize(500,400);
    try {
      jbInit();
    }
    catch(Exception e) {
      e.printStackTrace();
    }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
       imgAge2000 = new ImageIcon("imagen/age2000.gif");
        programas = new javax.swing.JTabbedPane();
        directorio = "";
        this.setFrameIcon(imgAge2000);
        setTitle("Editor");
        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        getContentPane().add(programas, java.awt.BorderLayout.CENTER);
        pack();
    }//GEN-END:initComponents

    public void initPantalla(JPantalla pant){
        pantalla = pant;
    }

    public boolean getModificado(){
        JPrograma temp;
        temp = (JPrograma) programas.getSelectedComponent();
        return temp.getModificado();
    }

    public void nuevoPrograma(){
        JPrograma temp = new JPrograma(pantalla);
        temp.initPrograma();
        programas.add("Sociedad"+numSociedad,temp);
        temp.setNombrePrograma("Sociedad"+numSociedad);
        programas.setSelectedComponent(temp);
        pantalla.setCleanViewMsg();
        temp.setCaretCodigo(2);
        temp.setFocusCodigo();
//        temp.refreshStatusBar();
//        if(getCountProgramas()==1) pantalla.setStatusBarInsert();
        numSociedad++;
    }

    public void abrirPrograma(){
        File archivo = null;
        JPrograma temp;
        JFileChooser aux = new JFileChooser();
        aux.setAcceptAllFileFilterUsed(false);
        // Configura el directorio donde va a buscar los programas .age
        if(directorio != ""){
          File directory = new File(directorio);
          aux.setCurrentDirectory(directory);
        }
        // Configurar filtros "txt" y "age"
        ExampleFileFilter filter = new ExampleFileFilter("age", "Sociedad de Agentes");
        aux.addChoosableFileFilter(filter);
        int valor=aux.showOpenDialog(this);
        if(valor==aux.APPROVE_OPTION){
            temp = new JPrograma(pantalla);
            archivo = aux.getSelectedFile();
            int indice = existeArchivo(archivo.getPath());
            if(indice<0){
                temp.abrir(archivo.getPath());
                programas.add(getOnlyName(archivo.getName()),temp);
                temp.setNombrePrograma(getOnlyName(archivo.getName()));
                programas.setSelectedComponent(temp);
                pantalla.setCleanViewMsg();
                temp.setFocusCodigo();
                directorio = archivo.getPath();
            }
            else{
              JOptionPane.showMessageDialog(null,
                  "El archivo especificado ya se encuentra abierto", "Alerta",
                                            JOptionPane.ERROR_MESSAGE);
              JPrograma temp2;
              temp2 = (JPrograma) programas.getComponentAt(indice);
              programas.setSelectedComponent(temp2);
//              temp2.refreshStatusBar();
              temp2.setFocusCodigo();
              updateViewMsg();
            }

       }
    }


// Busca entre los programas abiertos en el editor, si ya se abrió el archivo
    private int existeArchivo(String archivo){
    JPrograma temp;
    int total = programas.getComponentCount();
    for(int i=0; i<total; i++){
      temp = (JPrograma) programas.getComponentAt(i);
      if(archivo.equals(temp.getRuta())) return i; // Ya está abierto el archivo
    }
    return -1;  // Aún no se ha abierto ese archivo
    }

    public void guardarPrograma(){
        JPrograma temp;
        temp = (JPrograma) programas.getSelectedComponent();
        if(temp.existeRuta()){
            temp.guardar(temp.getRuta());
        }
        else
            guardarComoPrograma();
    }

    public void guardarComoPrograma(){
        File archivo = null;
        JPrograma temp;
        temp = (JPrograma) programas.getSelectedComponent();
        JFileChooser aux = new JFileChooser();
        aux.setDialogTitle("Guardar como...");
        // Especificar el directorio sobre el que se está trabajando
        if(directorio != ""){
          File directory = new File(directorio);
          aux.setCurrentDirectory(directory);
        }
        aux.setSelectedFile(new File(temp.getNombrePrograma()));
        // Especificar el filtro .age
        aux.setAcceptAllFileFilterUsed(false);
        ExampleFileFilter filter = new ExampleFileFilter("age", "Sociedad de Agentes");
        aux.addChoosableFileFilter(filter);
        int valor = aux.showSaveDialog(this);
        if(valor==aux.APPROVE_OPTION){
            archivo = aux.getSelectedFile();
            if(!isFileDirectory(archivo.getPath())){  // Si no existe otro archivo llamado igual
              temp.guardar(archivo.getPath());
              programas.setTitleAt(programas.getSelectedIndex(),
                                   getOnlyName(archivo.getName()));
              temp.setNombrePrograma(getOnlyName(archivo.getName()));
              directorio = archivo.getPath() + ".age";
              temp.setFocusCodigo();
            }
            else{ // Ya existe el archivo con ese nombre
              String[] options = {"Si","No"};
              int n = JOptionPane.showOptionDialog(this,
                      archivo.getPath()+".age"+" ya existe, \n¿Desea reemplazarlo?",
                      "Confirmación",
              JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, options,options[0]);
              if(n==0){  // Opción SI

              }

            }

       }
    }

    public void guardarPrograma(JPrograma temp, int index){
        if(temp.existeRuta()){
            temp.guardar(temp.getRuta());
        }
        else
            guardarComoPrograma(temp, index);
    }

    public boolean isFileDirectory(String ruta){
      try{
        String extension = ruta.substring(ruta.length() - 4);
        if (extension.compareTo(".age")!=0) {
          ruta = ruta + ".age";
        }
        BufferedReader fuente;
        fuente = new BufferedReader(
             new InputStreamReader(
             new FileInputStream(ruta)));
        fuente.close();
        return true;
      }
      catch (IOException e){
        // No se abre el archivo, no se encuentra
        return false;
      }
    }

    public boolean isRuta(){
        JPrograma temp;
        temp = (JPrograma) programas.getSelectedComponent();
        if(temp.existeRuta()) return true; else return false;

    }

    public void guardarComoPrograma(JPrograma temp, int index){
        File archivo = null;
        JFileChooser aux = new JFileChooser();
        aux.setDialogTitle("Guardar como...");
        // Especificar el directorio sobre el que se está trabajando
        if(directorio != ""){
          File directory = new File(directorio);
          aux.setCurrentDirectory(directory);
        }
        aux.setSelectedFile(new File(temp.getNombrePrograma())); // nombre candidato del programa
        // Filtro de los archivos a desplegar, solamente con extensión "age"
        aux.setAcceptAllFileFilterUsed(false);
        ExampleFileFilter filter = new ExampleFileFilter("age", "Sociedad de Agentes");
        aux.addChoosableFileFilter(filter);
        int valor = aux.showSaveDialog(this);
        if(valor==aux.APPROVE_OPTION){
            archivo = aux.getSelectedFile();
            temp.guardar(archivo.getPath());
            programas.setTitleAt(index,getOnlyName(archivo.getName()));
            temp.setNombrePrograma(getOnlyName(archivo.getName()));
            directorio = archivo.getPath()+".age";
            temp.setFocusCodigo();
       }
    }

    private String getOnlyName(String archivo){
        String e;
        int i=0;
        i = archivo.lastIndexOf('.');
        if(i>0 && i<archivo.length()){
            e = archivo.substring(0, i);
            return e;
        }
        else
          return archivo;
    }

    public int cerrarPrograma(){
        JPrograma temp;
        temp = (JPrograma) programas.getSelectedComponent();
        if(temp.getModificado()){
            String[] options = {"Si","No", "Cancelar"};
            int n = JOptionPane.showOptionDialog(this,
                    "¿Desea guardar los cambios de "+ programas.getTitleAt(programas.getSelectedIndex()) +" ?",
                    "Confirmación",
            JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, options,options[0]);
            if(n==0){  // Opción SI
                guardarPrograma();
                if(temp.existeRuta()) programas.remove(temp); // Si se guardo el archivo
                else return n; // si no se guardó el archivo, y se canceló el proceso
            }
            if(n==2){ // Opción CANCELAR
              return n;
            }              // RETURN 0 = Lo guardó antes de cerrarlo
          }                       // 1 = No lo guardó, y lo cerro
        programas.remove(temp);   // 2 = Canceló la petición
        return 1;
    }

    public void cerrarTodo(){
        while(programas.getComponentCount()!=0){
            if (cerrarPrograma()==2){  // Si Canceló la petición, entonces cancelar la petición de CerrarTodo
              return;
            }
        }
        programas.removeAll();
        pantalla.validar(5);
        pantalla.validar(16);
    }

    public int countProgramas(){
      return programas.getComponentCount();
    }

    public void guardarTodo(){
    JPrograma temp;
    int index = programas.getSelectedIndex();
    int total = programas.getComponentCount();
    for(int i=0; i<total; i++){
      temp = (JPrograma) programas.getComponentAt(i);
      programas.setSelectedIndex(i);
      guardarPrograma(temp, i);
    }
    programas.setSelectedIndex(index);
    }

    public boolean getGuardarTodo(){
    JPrograma temp;
    int index = programas.getSelectedIndex();
    int total = programas.getComponentCount();
    for(int i=0; i<total; i++){
      temp = (JPrograma) programas.getComponentAt(i);
      if(temp.getModificado()) return true;
    }
    return false;
    }

    public int getCountProgramas(){
    int total = programas.getComponentCount();
    return total;
    }

    public void pegar(){
      JPrograma temp;
      temp = (JPrograma) programas.getSelectedComponent();
      temp.pegar();
    }

    public void copiar(){
      JPrograma temp;
      temp = (JPrograma) programas.getSelectedComponent();
      temp.copiar();
    }

    public void cortar(){
      JPrograma temp;
      temp = (JPrograma) programas.getSelectedComponent();
      temp.cortar();
    }

    public void eliminar(){
      JPrograma temp;
      temp = (JPrograma) programas.getSelectedComponent();
      temp.eliminar();
    }

    public void deshacer(){
      JPrograma temp;
      temp = (JPrograma) programas.getSelectedComponent();
      temp.deshacer();
    }

    public void rehacer(){
      JPrograma temp;
      temp = (JPrograma) programas.getSelectedComponent();
      temp.rehacer();
    }

    public void seleccionarTodo(){
      JPrograma temp;
      temp = (JPrograma) programas.getSelectedComponent();
      temp.seleccionarTodo();
    }

    public void setCaretCodigo(int row){
        JPrograma temp;
        temp = (JPrograma) programas.getSelectedComponent();
        temp.setCaretCodigo(row); //Coloca el cursosr en el renglon "row"
        temp.setFocusCodigo(); // Petición de Focus al componente codigo
    }

    public void imprimirPrograma(){
        JPrograma temp;
        temp = (JPrograma) programas.getSelectedComponent();
        temp.imprimir();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane programas;

    private void jbInit() throws Exception {
    programas.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(MouseEvent e) {
        programas_mouseClicked(e);
      }
    });
    programas.addComponentListener(new java.awt.event.ComponentAdapter() {
      public void componentShown(ComponentEvent e) {
        programas_componentShown(e);
      }
    });
    programas.addContainerListener(new java.awt.event.ContainerAdapter() {
      public void componentRemoved(ContainerEvent e) {
        programas_componentRemoved(e);
      }
    });
    this.setIcon(false);
    this.setBorder(null);
    this.setToolTipText("");
    this.addInternalFrameListener(new javax.swing.event.InternalFrameAdapter() {
      public void internalFrameClosing(InternalFrameEvent e) {
        this_internalFrameClosing(e);
      }
    });
  }

  void this_internalFrameClosing(InternalFrameEvent e) {
      cerrarTodo();
//    pantalla.validar(5);
  }

  public int ejecutar(){
    JPrograma temp;
    temp = (JPrograma) programas.getSelectedComponent();
    return temp.ejecutar();
  }

  public void setFocus(){
    JPrograma temp;
    programas.getSelectedComponent().setFocusable(true);
    temp = (JPrograma) programas.getSelectedComponent();
    temp.setFocusable(true);
    temp.setFocusCodigo();
  }

  public int getCountWarning(){
    JPrograma temp;
    temp = (JPrograma) programas.getSelectedComponent();
    return temp.getCountWarning();
  }

  public int getCountErrores(){
    JPrograma temp;
    temp = (JPrograma) programas.getSelectedComponent();
    return temp.getCountErrores();
  }

  public String getWarning(int i){
    JPrograma temp;
    temp = (JPrograma) programas.getSelectedComponent();
    return temp.getWarning(i);
  }

  public String getError(int i){
    JPrograma temp;
    temp = (JPrograma) programas.getSelectedComponent();
    return temp.getError(i);
  }

  public int getRowWarning(int i){
    JPrograma temp;
    temp = (JPrograma) programas.getSelectedComponent();
    return temp.getRowWarning(i);
  }

  public int getRowError(int i){
    JPrograma temp;
    temp = (JPrograma) programas.getSelectedComponent();
    return temp.getRowError(i);
  }

  void programas_componentRemoved(ContainerEvent e) {
    if(programas.getComponentCount()>0){  // Ubicar el Focus del programa
      JPrograma temp;
      temp = (JPrograma) programas.getSelectedComponent();
      temp.setFocusCodigo();
    }
  }

  void programas_componentShown(ComponentEvent e) {
    // CONSIDERAR
    // Tal parece que no entra a esta función en ningún momento
    JPrograma temp;
    temp = (JPrograma) programas.getSelectedComponent();
    temp.setFocusCodigo();
    JOptionPane.showMessageDialog(null,
        "Si entró a la función programas_componentShown", "Alerta",
                                  JOptionPane.ERROR_MESSAGE);

  }

  void programas_mouseClicked(MouseEvent e) {
    updateViewMsg();
  }

  private void updateViewMsg(){
    if(programas.getComponentCount()>0){  // Ubicar el Focus del programa
      JPrograma temp;
      temp = (JPrograma) programas.getSelectedComponent();
      temp.setFocusCodigo();  // Coloca el cursor en el programa que corresponde
      pantalla.validar(18);  // despliega los warnings/errores, si es que los tiene el programa
    }

  }


/*  void programas_focusGained(FocusEvent e) {
    pantalla.validar(18);
  }
*/
    // End of variables declaration//GEN-END:variables
}
